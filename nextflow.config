/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-core/tumourevo Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Workflow flags
    outdir = null
    input = null
    genome = null
    fasta = null

    tools = "mobster,viber,pyclone-vi,sparsesignatures,sigprofiler"  // Default Subclonal deconvolution & Signature deconvolution tools
    publish_dir_mode = "copy"
    publish_dir_mode_genome_sigprofiler = "move"

    filter = true

    // VEP
    download_cache_vep = null
    vep_cache = null

    vep_cache_version = null
    vep_species = null
    vep_genome = null
    vep_custom_args = "--everything --filter_common --per_gene --total_length --offline --format vcf"

    // ANNOTATE_DRIVERS
    drivers_table = "https://raw.githubusercontent.com/nf-core/test-datasets/refs/heads/tumourevo/data/DRIVER_ANNOTATION/ANNOTATE_DRIVER/Compendium_Cancer_Genes.tsv"

    // vcf2CNAqc
    vcf_filter_mutations = "TRUE"

    // CNAqc
    cnaqc_matching_strategy = "rightmost"
    cnaqc_karyotypes = "c('1:0', '1:1', '2:0', '2:1', '2:2')"
    cnaqc_min_karyotype_size = "0"
    cnaqc_min_absolute_karyotype_mutations = "100"
    cnaqc_p_binsize_peaks = "0.005"
    cnaqc_matching_epsilon = "NULL"
    cnaqc_purity_error = "0.05"
    cnaqc_vaf_tolerance = "0.015"
    cnaqc_n_bootstrap = "1"
    cnaqc_kernel_adjust = "1"
    cnaqc_kde = "TRUE"
    cnaqc_starting_state_subclonal_evolution = "1:1"
    cnaqc_cluster_subclonal_CCF = "FALSE"
    cnaqc_muts_per_karyotype = "25"
    cnaqc_cutoff_QC_PASS = "0.1"
    cnaqc_method = "ENTROPY"
    cnaqc_plot_cn = "absolute"

    // join_CNAqc
    joincnaqc_qc_filter = "FALSE"
    joincnaqc_keep_original = "TRUE"


    // VAF deconvolution - pyclonevi
    pyclonevi_n_cluster = 20    // default value for PYCLONEVI
    pyclonevi_density = 'beta-binomial' // default value for PYCLONEVI
    pyclonevi_n_grid_point = 100 // default value for PYCLONEVI
    pyclonevi_n_restarts = 100 // default value for PYCLONEVI

    // VAF deconvolution - mobster
    mobster_K = "1:5"
    mobster_samples = "5"
    mobster_init = "peaks"
    mobster_tail = "c(TRUE,FALSE)"
    mobster_epsilon = "1e-10"
    mobster_maxIter = "250"
    mobster_fit_type = "MM"
    mobster_seed = "12345"
    mobster_model_selection = "reICL"
    mobster_trace = "FALSE"
    mobster_parallel = "TRUE"
    mobster_pi_cutoff = "0.02"
    mobster_n_cutoff = "10"
    mobster_auto_setup = "NULL"
    mobster_silent = "FALSE"

    // VAF deconvolution - VIBER
    viber_K = "10"
    viber_samples = "10"
    viber_alpha_0 = "1e-06"
    viber_a_0 = "1"
    viber_b_0 = "1"
    viber_maxIter = "5000"
    viber_epsilon_conv = "1e-10"
    viber_q_init = "prior"
    viber_trace = "FALSE"
    viber_binomial_cutoff = "0.05"
    viber_dimensions_cutoff = "1"
    viber_pi_cutoff = "0.02"
    viber_re_assign = "FALSE"

    // Clone tree - ctree
    ctree_sspace_cutoff = "10000"
    ctree_n_sampling = "5000"
    ctree_store_max = "100"

    // Mutational Signature Deconvolution - SparseSignatures
    // nmfLassoCV
    sparsesignatures_K = "2:10"
    sparsesignatures_background_signature = "NULL"
    sparsesignatures_beta = "NULL"
    sparsesignatures_normalize_counts = "TRUE"
    sparsesignatures_nmf_runs = "10"
    sparsesignatures_iterations = "30"
    sparsesignatures_max_iterations_lasso = "10000"
    sparsesignatures_num_processes = "all"
    sparsesignatures_cross_validation_entries = "0.01"
    sparsesignatures_cross_validation_repetitions = "50"
    sparsesignatures_cross_validation_iterations = "5"
    sparsesignatures_lambda_values_alpha = "c(0.00, 0.01, 0.05, 0.10)"
    sparsesignatures_lambda_values_beta = "c(0.01, 0.05, 0.1, 0.2)"
    sparsesignatures_lambda_rate_alpha = "0"
    sparsesignatures_verbose = "TRUE"
    sparsesignatures_seed = "12345"


    // Download reference genome Sigprofiler
    download_sigprofiler_genome = true
    genome_installed_path = null

    // Mutational Signature Deconvolution - SigProfiler
    sigprofiler_exome = "False"
    sigprofiler_input_type = "matrix"
    sigprofiler_context_type = "96,DINUC,ID"
    sigprofiler_minimum_signatures = "1"
    sigprofiler_maximum_signatures = "25"
    sigprofiler_nmf_replicates = "100"
    sigprofiler_resample = "True"
    sigprofiler_seeds = "random"
    sigprofiler_matrix_normalization = "gmm"
    sigprofiler_nmf_init = "random"
    sigprofiler_min_nmf_iterations = "10000"
    sigprofiler_max_nmf_iterations = "1000000"
    sigprofiler_nmf_test_conv = "10000"
    sigprofiler_nmf_tolerance = "1e-15"
    sigprofiler_cpu = "-1"
    sigprofiler_stability = "0.8"
    sigprofiler_min_stability = "0.2"
    sigprofiler_combined_stability = "1"
    sigprofiler_cosmic_version = "3.4"
    sigprofiler_make_decomposition_plots = "True"
    sigprofiler_collapse_to_SBS96 = "True"
    sigprofiler_get_all_signature_matrices = "True"
    sigprofiler_export_probabilities = "True"
    sigprofiler_bed_file = "None"
    sigprofiler_chrom_based = "False"
    sigprofiler_plot = "False"
    sigprofiler_tsb_stat = "False"
    sigprofiler_seqInfo = "False"
    sigprofiler_cushion = "100"
    sigprofiler_precision = "single"
    sigprofiler_gpu = "False"
    sigprofiler_batch_size = "1"
    sigprofiler_allow_stability_drop = "False"

    // TINC
    tinc_vaf_range_tumour = "c(0, 0.7)"
    tinc_cutoff_miscalled_clonal = "0.6"
    tinc_cutoff_lv_assignment = "0.75"
    tinc_N = "20000"
    tinc_fast = "TRUE"
    tinc_normal_contamination_lv = "3"


    // Boilerplate options
    //name = false
    email = false
    email_on_fail = false
    plaintext_email = false
    monochrome_logs = false
    help = false
    igenomes_base = 's3://ngi-igenomes/igenomes/'
    tracedir = "${params.outdir}/pipeline_info"
    igenomes_ignore = false
    custom_config_version = 'master'
    custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    hostnames = false
    config_profile_description = false
    config_profile_contact = false
    config_profile_url = false

    // Boilerplate options
    outdir                       = null
    publish_dir_mode             = 'copy'
    email                        = null
    email_on_fail                = null
    plaintext_email              = false
    monochrome_logs              = false
    hook_url                     = null
    help                         = false
    help_full                    = false
    show_hidden                  = false
    version                      = false
    pipelines_testdata_base_path = 'https://raw.githubusercontent.com/nf-core/test-datasets/'
    trace_report_suffix          = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')// Config options
    config_profile_name        = null
    config_profile_description = null

    custom_config_version      = 'master'
    custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact     = null
    config_profile_url         = null

    // Schema validation default options
    validate_params            = true
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/tumourevo:dev'

// Load base.config by default for all pipelines

includeConfig 'conf/base.config'
includeConfig 'conf/modules/ensemblvep.config'
includeConfig 'conf/modules/formatter.config'
includeConfig 'conf/modules/lifter.config'
includeConfig 'conf/modules/cnaqc.config'
includeConfig 'conf/modules/driver_annotation.config'
includeConfig 'conf/modules/pyclonevi.config'
includeConfig 'conf/modules/viber.config'
includeConfig 'conf/modules/mobsterh.config'
includeConfig 'conf/modules/tinc.config'
includeConfig 'conf/modules/ctree.config'
includeConfig 'conf/modules/sparsesignatures.config'
includeConfig 'conf/modules/sigprofiler.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }

    plugins {
        id 'nf-schema@2.0.0'
    }
}

// Load nf-core custom profiles from different Institutions
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"

// Load nf-core/tumourevo custom profiles from different institutions.
// TODO nf-core: Optionally, you can add a pipeline-specific nf-core config at https://github.com/nf-core/configs
// includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/tumourevo.config" : "/dev/null"

// Set default registry for Apptainer, Docker, Podman, Charliecloud and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Charliecloud / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry    = 'quay.io'
docker.registry       = 'quay.io'
podman.registry       = 'quay.io'
singularity.registry  = 'quay.io'
charliecloud.registry = 'quay.io'

// Load igenomes.config if required
includeConfig !params.igenomes_ignore ? 'conf/igenomes.config' : 'conf/igenomes_ignored.config'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Set bash options
process.shell = """\
bash

set -e # Exit if a tool returns a non-zero status/exit code
set -u # Treat unset variables and parameters as an error
set -o pipefail # Returns the status of the last command to exit with a non-zero status or zero if all successfully execute
set -C # No clobber - prevent output redirection from overwriting files.
"""

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${params.trace_report_suffix}.html"
}

manifest {
    name            = 'nf-core/tumourevo'
    author          = """Nicola Calonaci, Elena Buscaroli, Katsiaryna Davydzenka, Giorgia Gandolfi, Brandon Hastings, Virginia Gazziero, Lucrezia Valeriani and Giulio Caravagna""" // The author field is deprecated from Nextflow version 24.10.0, use contributors instead
    contributors    = [
        // TODO nf-core: Update the field with the details of the contributors to your pipeline. New with Nextflow version 24.10.0
        [
            name: 'Nicola Calonaci',
            affiliation: 'University of Trieste',
            email: 'nicola.calonaci@units.it',
            github: 'https://github.com/nicola-calonaci',
            contribution: ['author', 'mantainer'], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
        [
            name: ' Elena Buscaroli',
            affiliation: '',
            email: '',
            github: '',
            contribution: [], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
        [
            name: ' Katsiaryna Davydzenka',
            affiliation: '',
            email: '',
            github: '',
            contribution: [], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
        [
            name: ' Giorgia Gandolfi',
            affiliation: '',
            email: '',
            github: '',
            contribution: [], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
        [
            name: ' Virginia Gazziero',
            affiliation: '',
            email: '',
            github: '',
            contribution: [], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
        [
            name: ' Asad Sadr',
            affiliation: '',
            email: '',
            github: '',
            contribution: [], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
        [
            name: ' Lucrezia Valeriani and Giulio Caravagna',
            affiliation: '',
            email: '',
            github: '',
            contribution: [], // List of contribution types ('author', 'maintainer' or 'contributor')
            orcid: ''
        ],
    ]
    homePage        = 'https://github.com/nf-core/tumourevo'
    description     = """Analysis pipleine to model tumour clonal evolution from WGS data (driver annotation, quality control of copy number calls, subclonal and mutational signature deconvolution)"""
    mainScript      = 'main.nf'
    defaultBranch   = 'master'
    nextflowVersion = '!>=24.04.2'
    version         = '1.0dev'
    doi             = ''
}

// Nextflow plugins
plugins {
    id 'nf-schema@2.1.1' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

validation {
    defaultIgnoreParams = ["genomes"]
    monochromeLogs = params.monochrome_logs
    help {
        enabled = true
        command = "nextflow run nf-core/tumourevo -profile <docker/singularity/.../institute> --input samplesheet.csv --outdir <OUTDIR>"
        fullParameter = "help_full"
        showHiddenParameter = "show_hidden"
        beforeText = """
-\033[2m----------------------------------------------------\033[0m-
                                        \033[0;32m,--.\033[0;30m/\033[0;32m,-.\033[0m
\033[0;34m        ___     __   __   __   ___     \033[0;32m/,-._.--~\'\033[0m
\033[0;34m  |\\ | |__  __ /  ` /  \\ |__) |__         \033[0;33m}  {\033[0m
\033[0;34m  | \\| |       \\__, \\__/ |  \\ |___     \033[0;32m\\`-._,-`-,\033[0m
                                        \033[0;32m`._,._,\'\033[0m
\033[0;35m  nf-core/tumourevo ${manifest.version}\033[0m
-\033[2m----------------------------------------------------\033[0m-
"""
        afterText = """${manifest.doi ? "\n* The pipeline\n" : ""}${manifest.doi.tokenize(",").collect { "    https://doi.org/${it.trim().replace('https://doi.org/','')}"}.join("\n")}${manifest.doi ? "\n" : ""}
* The nf-core framework
    https://doi.org/10.1038/s41587-020-0439-x

* Software dependencies
    https://github.com/nf-core/tumourevo/blob/master/CITATIONS.md
"""
    }
    summary {
        beforeText = validation.help.beforeText
        afterText = validation.help.afterText
    }
}
